(defun generate-jumping-peg (n pos elem1 elem2) (prog (i lis)
                                                  (setq i 1)
                                                  (setq size (- (* 2 n) 1))
                                             loop
                                                  (if (= i (+ n 1)) (go insert-elem2))
                                                  (setq list (generate-row i size elem1))
                                                  (setq lis (append lis list))
                                                  (print list)
                                                  (setq i (+ i 1))
                                                  (go loop)
                                     insert-elem2
                                                  (setq pos (calc-pos lis pos))
                                                  (setq lis (myreplace lis pos elem2))
                                                  (return lis)
                                                )
)

(defun calc-pos (lis pos) (prog (p local_pos)
                            (setq p 0)
                            (setq i 0)
                       loop
                            (setq i (+ i 1))
                            (setq local_pos (+ (position 'p lis :start (+ p 1) :test #'equal) 1))
                            (setq p local_pos)
                            (if (= i pos) (return local_pos) (go loop))
                          )
)

(defun generate-row (n size element) (prog (i list middle)
                                       (setq i (- n 1))
                                       (setq middle (/ (+ size 1) 2))
                                       (loop for i from 1 to size do (setq list (append list (cons '* nil))))
                                       (if (= (mod n 2) 1) (setq list (myreplace list middle element)))
                                       (if (> n 1) (go loop) (return list)) 
                                  loop
                                       (setq list (myreplace list (+ middle i) element))
                                       (setq list (myreplace list (- middle i) element))
                                       (setq i (- i 2))
                                       (if (< i 0) (return list) (go loop))
                                     )
)

(defun myreplace (list pos element) (prog (l)
                                      (setq i 1)
                                 loop
                                      (if (= i (+ (length list) 1)) (return l))
                                      (if (= i pos) (setq l (append l (cons element nil))) (setq l (append l (cons (nth (- i 1) list) nil))))
                                      (setq i (+ i 1))
                                      (go loop)
                                    )
)

(defun print-peg (list depth) (prog (size l1 i start end)
                          (setq size (- (* 2 depth) 1))
                          (setq start 0)
                          (setq end size)
                     loop
                          (loop for i from start to (- end 1) do (setq l1 (append l1 (cons (nth i list) nil))))
                          (print l1)
                          (setq l1 '())
                          (if (= end (length list)) (return nil))
                          (setq start end)
                          (setq end (+ end size))
                          (go loop)
                        )
)
